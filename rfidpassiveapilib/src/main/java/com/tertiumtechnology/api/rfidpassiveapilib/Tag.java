/*
 * The MIT License
 *
 * Copyright 2021 Tertium Technology.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.tertiumtechnology.api.rfidpassiveapilib;

/**
 * Represents a single tag with its ID.
 * <p>
 * An array of {@code Tag} objects is generated by inventory operation.
 */
public abstract class Tag {
    private static final int DEFAULT_TIMEOUT = 2000; // 2000ms = 2s
    protected final byte[] ID;
    protected final PassiveReader passive_reader;
    protected boolean reverseID;
    protected int timeout;

    /**
     * Class constructor
     *
     * @param ID             the tag ID
     * @param passive_reader reference to the passive reader object
     */
    public Tag(byte[] ID, PassiveReader passive_reader) {
        this.ID = ID;
        reverseID = false;
        timeout = DEFAULT_TIMEOUT;
        this.passive_reader = passive_reader;
    }

    /**
     * Get tag ID.
     * <p>
     * If the reverse ID flag is set to true return tag ID with bytes in reverse
     * order.
     *
     * @return the tag ID
     */
    public synchronized byte[] getID() {
        return ID;
    }

    /**
     * Get timeout value.
     *
     * @return the timeout value (milliseconds)
     */
    public synchronized int getTimeout() {
        return timeout;
    }

    /**
     * Set Timeout value.
     * <p>
     * The timeout value is used for every tag command (read, write, lock, ...).
     *
     * @param timeout the timeout value (milliseconds)
     */
    public synchronized void setTimeout(int timeout) {
        this.timeout = timeout;
    }

    /**
     * Set reverse ID flag.
     * <p>
     * If set to true the reverse ID flag cause method {@code getID()} return
     * tag ID with bytes in reverse order.
     *
     * @param reverseID the reverse ID flag value
     */
    public synchronized void setReverseID(boolean reverseID) {
        this.reverseID = reverseID;
    }

    protected String byteToHex(byte val) {
        return String.format("%02X", val);
    }
}
